/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.user.tables;


import com.wuda.foundation.jooq.code.generation.user.FoundationUser;
import com.wuda.foundation.jooq.code.generation.user.Indexes;
import com.wuda.foundation.jooq.code.generation.user.Keys;
import com.wuda.foundation.jooq.code.generation.user.tables.records.UserPhoneRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 用户的电话
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPhone extends TableImpl<UserPhoneRecord> {

    private static final long serialVersionUID = -1307854432;

    /**
     * The reference instance of <code>foundation_user.user_phone</code>
     */
    public static final UserPhone USER_PHONE = new UserPhone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPhoneRecord> getRecordType() {
        return UserPhoneRecord.class;
    }

    /**
     * The column <code>foundation_user.user_phone.id</code>.
     */
    public final TableField<UserPhoneRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_user.user_phone.user_id</code>.
     */
    public final TableField<UserPhoneRecord, ULong> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_user.user_phone.phone_id</code>.
     */
    public final TableField<UserPhoneRecord, ULong> PHONE_ID = createField(DSL.name("phone_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_user.user_phone.used_for</code>. 电话的用途。比如用于400电话。也就是电话使用的业务场景。
     */
    public final TableField<UserPhoneRecord, UByte> USED_FOR = createField(DSL.name("used_for"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "电话的用途。比如用于400电话。也就是电话使用的业务场景。");

    /**
     * The column <code>foundation_user.user_phone.state</code>. 状态，每种用途的phone的il状态可能不同，比如如果用于登录的phone，状态可以是禁止登录状态
     */
    public final TableField<UserPhoneRecord, UByte> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "状态，每种用途的phone的il状态可能不同，比如如果用于登录的phone，状态可以是禁止登录状态");

    /**
     * The column <code>foundation_user.user_phone.description</code>. 简单描述
     */
    public final TableField<UserPhoneRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "简单描述");

    /**
     * The column <code>foundation_user.user_phone.create_time</code>.
     */
    public final TableField<UserPhoneRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_user.user_phone.create_user_id</code>.
     */
    public final TableField<UserPhoneRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_user.user_phone.last_modify_time</code>.
     */
    public final TableField<UserPhoneRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_user.user_phone.last_modify_user_id</code>.
     */
    public final TableField<UserPhoneRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_user.user_phone.is_deleted</code>.
     */
    public final TableField<UserPhoneRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_user.user_phone</code> table reference
     */
    public UserPhone() {
        this(DSL.name("user_phone"), null);
    }

    /**
     * Create an aliased <code>foundation_user.user_phone</code> table reference
     */
    public UserPhone(String alias) {
        this(DSL.name(alias), USER_PHONE);
    }

    /**
     * Create an aliased <code>foundation_user.user_phone</code> table reference
     */
    public UserPhone(Name alias) {
        this(alias, USER_PHONE);
    }

    private UserPhone(Name alias, Table<UserPhoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPhone(Name alias, Table<UserPhoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户的电话"), TableOptions.table());
    }

    public <O extends Record> UserPhone(Table<O> child, ForeignKey<O, UserPhoneRecord> key) {
        super(child, key, USER_PHONE);
    }

    @Override
    public Schema getSchema() {
        return FoundationUser.FOUNDATION_USER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PHONE_IDX_USER_ID);
    }

    @Override
    public Identity<UserPhoneRecord, ULong> getIdentity() {
        return Keys.IDENTITY_USER_PHONE;
    }

    @Override
    public UniqueKey<UserPhoneRecord> getPrimaryKey() {
        return Keys.KEY_USER_PHONE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserPhoneRecord>> getKeys() {
        return Arrays.<UniqueKey<UserPhoneRecord>>asList(Keys.KEY_USER_PHONE_PRIMARY, Keys.KEY_USER_PHONE_IDX_UNIQUE);
    }

    @Override
    public UserPhone as(String alias) {
        return new UserPhone(DSL.name(alias), this);
    }

    @Override
    public UserPhone as(Name alias) {
        return new UserPhone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPhone rename(String name) {
        return new UserPhone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPhone rename(Name name) {
        return new UserPhone(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, ULong, ULong, UByte, UByte, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
