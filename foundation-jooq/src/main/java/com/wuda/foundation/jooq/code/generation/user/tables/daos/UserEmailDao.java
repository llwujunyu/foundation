/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.user.tables.daos;


import com.wuda.foundation.jooq.code.generation.user.tables.UserEmail;
import com.wuda.foundation.jooq.code.generation.user.tables.records.UserEmailRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 用户的email
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEmailDao extends DAOImpl<UserEmailRecord, com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail, ULong> {

    /**
     * Create a new UserEmailDao without any configuration
     */
    public UserEmailDao() {
        super(UserEmail.USER_EMAIL, com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail.class);
    }

    /**
     * Create a new UserEmailDao with an attached configuration
     */
    public UserEmailDao(Configuration configuration) {
        super(UserEmail.USER_EMAIL, com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail.class, configuration);
    }

    @Override
    public ULong getId(com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchById(ULong... values) {
        return fetch(UserEmail.USER_EMAIL.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail fetchOneById(ULong value) {
        return fetchOne(UserEmail.USER_EMAIL.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfUserId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByUserId(ULong... values) {
        return fetch(UserEmail.USER_EMAIL.USER_ID, values);
    }

    /**
     * Fetch records that have <code>email_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfEmailId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.EMAIL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email_id IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByEmailId(ULong... values) {
        return fetch(UserEmail.USER_EMAIL.EMAIL_ID, values);
    }

    /**
     * Fetch records that have <code>used_for BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfUsedFor(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.USED_FOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>used_for IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByUsedFor(UByte... values) {
        return fetch(UserEmail.USER_EMAIL.USED_FOR, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfState(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByState(UByte... values) {
        return fetch(UserEmail.USER_EMAIL.STATE, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByDescription(String... values) {
        return fetch(UserEmail.USER_EMAIL.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByCreateTime(LocalDateTime... values) {
        return fetch(UserEmail.USER_EMAIL.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>create_user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfCreateUserId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.CREATE_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_user_id IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByCreateUserId(ULong... values) {
        return fetch(UserEmail.USER_EMAIL.CREATE_USER_ID, values);
    }

    /**
     * Fetch records that have <code>last_modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfLastModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.LAST_MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_modify_time IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByLastModifyTime(LocalDateTime... values) {
        return fetch(UserEmail.USER_EMAIL.LAST_MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>last_modify_user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfLastModifyUserId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.LAST_MODIFY_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_modify_user_id IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByLastModifyUserId(ULong... values) {
        return fetch(UserEmail.USER_EMAIL.LAST_MODIFY_USER_ID, values);
    }

    /**
     * Fetch records that have <code>is_deleted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchRangeOfIsDeleted(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(UserEmail.USER_EMAIL.IS_DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_deleted IN (values)</code>
     */
    public List<com.wuda.foundation.jooq.code.generation.user.tables.pojos.UserEmail> fetchByIsDeleted(ULong... values) {
        return fetch(UserEmail.USER_EMAIL.IS_DELETED, values);
    }
}
