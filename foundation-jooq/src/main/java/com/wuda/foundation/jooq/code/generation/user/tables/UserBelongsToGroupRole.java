/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.user.tables;


import com.wuda.foundation.jooq.code.generation.user.FoundationUser;
import com.wuda.foundation.jooq.code.generation.user.Keys;
import com.wuda.foundation.jooq.code.generation.user.tables.records.UserBelongsToGroupRoleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * 用户在所属的组中的角色
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserBelongsToGroupRole extends TableImpl<UserBelongsToGroupRoleRecord> {

    private static final long serialVersionUID = -433073885;

    /**
     * The reference instance of <code>foundation_user.user_belongs_to_group_role</code>
     */
    public static final UserBelongsToGroupRole USER_BELONGS_TO_GROUP_ROLE = new UserBelongsToGroupRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserBelongsToGroupRoleRecord> getRecordType() {
        return UserBelongsToGroupRoleRecord.class;
    }

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.id</code>.
     */
    public final TableField<UserBelongsToGroupRoleRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.user_id</code>. 用户ID
     */
    public final TableField<UserBelongsToGroupRoleRecord, ULong> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "用户ID");

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.group_type</code>. 组的类型，比如部门是一种组，其他组织机构也是一种组
     */
    public final TableField<UserBelongsToGroupRoleRecord, UShort> GROUP_TYPE = createField(DSL.name("group_type"), org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "组的类型，比如部门是一种组，其他组织机构也是一种组");

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.group_identifier</code>. 组的唯一标记，如果组的类型是部门，则该值应该是部门表的ID
     */
    public final TableField<UserBelongsToGroupRoleRecord, ULong> GROUP_IDENTIFIER = createField(DSL.name("group_identifier"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "组的唯一标记，如果组的类型是部门，则该值应该是部门表的ID");

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.permission_role_id</code>. 角色ID
     */
    public final TableField<UserBelongsToGroupRoleRecord, ULong> PERMISSION_ROLE_ID = createField(DSL.name("permission_role_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "角色ID");

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.create_time</code>.
     */
    public final TableField<UserBelongsToGroupRoleRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.create_user_id</code>.
     */
    public final TableField<UserBelongsToGroupRoleRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.last_modify_time</code>.
     */
    public final TableField<UserBelongsToGroupRoleRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.last_modify_user_id</code>.
     */
    public final TableField<UserBelongsToGroupRoleRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_user.user_belongs_to_group_role.is_deleted</code>.
     */
    public final TableField<UserBelongsToGroupRoleRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_user.user_belongs_to_group_role</code> table reference
     */
    public UserBelongsToGroupRole() {
        this(DSL.name("user_belongs_to_group_role"), null);
    }

    /**
     * Create an aliased <code>foundation_user.user_belongs_to_group_role</code> table reference
     */
    public UserBelongsToGroupRole(String alias) {
        this(DSL.name(alias), USER_BELONGS_TO_GROUP_ROLE);
    }

    /**
     * Create an aliased <code>foundation_user.user_belongs_to_group_role</code> table reference
     */
    public UserBelongsToGroupRole(Name alias) {
        this(alias, USER_BELONGS_TO_GROUP_ROLE);
    }

    private UserBelongsToGroupRole(Name alias, Table<UserBelongsToGroupRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserBelongsToGroupRole(Name alias, Table<UserBelongsToGroupRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户在所属的组中的角色"), TableOptions.table());
    }

    public <O extends Record> UserBelongsToGroupRole(Table<O> child, ForeignKey<O, UserBelongsToGroupRoleRecord> key) {
        super(child, key, USER_BELONGS_TO_GROUP_ROLE);
    }

    @Override
    public Schema getSchema() {
        return FoundationUser.FOUNDATION_USER;
    }

    @Override
    public Identity<UserBelongsToGroupRoleRecord, ULong> getIdentity() {
        return Keys.IDENTITY_USER_BELONGS_TO_GROUP_ROLE;
    }

    @Override
    public UniqueKey<UserBelongsToGroupRoleRecord> getPrimaryKey() {
        return Keys.KEY_USER_BELONGS_TO_GROUP_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserBelongsToGroupRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<UserBelongsToGroupRoleRecord>>asList(Keys.KEY_USER_BELONGS_TO_GROUP_ROLE_PRIMARY);
    }

    @Override
    public UserBelongsToGroupRole as(String alias) {
        return new UserBelongsToGroupRole(DSL.name(alias), this);
    }

    @Override
    public UserBelongsToGroupRole as(Name alias) {
        return new UserBelongsToGroupRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserBelongsToGroupRole rename(String name) {
        return new UserBelongsToGroupRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserBelongsToGroupRole rename(Name name) {
        return new UserBelongsToGroupRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, UShort, ULong, ULong, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
